yamleer: Yamleer is a Domain-Specific Language designed to generate json schema
configuration:
  generator: GPT-4
  targetLanguage: Json Schema writen in yaml 
  guidelines:
    - All key should be optional in the json schema.
    - Keys whose name start with "*" should be marked required in the json schema. Remove the "*" from the name.
    - Text enclosed by parenthesis "(text)" in comments presents a key's description, which should be included in the JSON schema.
    - Text enclosed by slash "/text/" represents the pattern or Pattern Properties that should be used. The pattern alias is defined in regexAlias
    - Only child elements under the "schema:" key should be converted to the JSON schema.
    - The first word in the leers description is the leers name.
    - Use the leers name and description as the $title and â‚¬description of the json schema.
    - Include the "leers:" key in the JSON schema.
    - Allow whitespaces in keys name (e.g., "my key:" instead of "my_key:").
regexAlias:
  - componentRule : ^[A-Z][a-zA-Z0-9]*$ # CamelCase
  - forRule: ^for\s.*$ # for data
  - ifRule: ^if\s.*$ # if condition
schema:
  leers: Reactleers is a domain-specific language that represents React components #(The description of the leers)
  configuration:
    generator: string #(The intended AI generator)
    targetLanguage: string #(Target language in which Reactleers will be converted)
    context: string[] #(Specify the context in wich Reactleers is used)
    codingStyle: string[] #(Coding style preferences)
  structure: rstruct #(Structure of the components)
  components: {/componentRule/: component}[] #(List of React components)
  $defs:
    - component:
      path: string #(File path of the component)
      props: (string or {string: string})[] #(Component's properties)
      states: {string: string}[] #(Component's states)
      behavior: string[] #(Component's behavior)
      layout: string[] #(Component's layout)
      content: string #(Component's content)
      importFrom: string #(Path to the imported component)
    - rstruct: null or {/componentRule/: rstruct} or forLoop or ifCondition
    - forLoop: {/forRule/: /componentRule/} #(For loop structure)
    - ifCondition: {/ifRule/: {string: /componentRule/}[]} #(Conditional structure)

  
